extern crate micrograd;

use micrograd::{engine::*, nn::*};
use rand::{prelude::*, rngs::StdRng};
use std::iter::*;

fn main() {
    let (x, y) = sklearn::datasets::make_moons(100, 0.1);

    let mut rng = StdRng::seed_from_u64(2718);
    let model = MLP::new(&mut rng, 2, vec![16, 16, 1]);

    println!("{}", model);
    println!("number of parameters {}", model.parameters().len());

    let xxx = loss(model, x, y);
    let dot = viz::render_dot(xxx.0.clone());
    std::fs::write("./graph.dot.txt", dot).expect("Unable to write file");

    println!("{:?}", xxx);
}

fn loss(model: MLP, x: Vec<Vec<ValueType>>, y: Vec<ValueType>) -> (Value, f64) {
    let (xb, yb) = (x, y);

    let inputs = xb
        .iter()
        .map(|v1| v1.iter().map(|v2| Value::new(*v2)).collect::<Vec<_>>())
        .collect::<Vec<_>>();

    // forward the model to get scores
    let scores = inputs
        .iter()
        .map(|vs| model.run(vs.clone())[0].clone())
        .collect::<Vec<_>>();

    // svm "max-margin" loss
    let losses = zip(yb.clone(), scores.clone()).map(|(yi, scorei)| (1. + -yi * scorei).relu());
    let data_loss = losses.clone().reduce(|v1, v2| v1 + v2).unwrap() / losses.len() as ValueType;
    // L2 regularization
    let alpha = 1e-4;
    let reg_loss = alpha
        * model
            .parameters()
            .iter()
            .map(|v| v.clone() * v.clone())
            .reduce(|v1, v2| v1 + v2)
            .unwrap();
    let total_loss = data_loss + reg_loss;

    let accuracy = zip(scores.clone(), yb.clone()).map(|(si, yi)| {
        if (si.data() > 0.) == (yi > 0.) {
            1.
        } else {
            0.
        }
    }); //.collect::<Vec<_>>();
    let accuracy = accuracy.clone().reduce(|v1, v2| v1 + v2).unwrap() / accuracy.len() as f64;

    (total_loss, accuracy)
}

mod sklearn {
    pub mod datasets {
        use micrograd::engine::*;

        pub fn make_moons(_n_samples: usize, _noise: f64) -> (Vec<Vec<ValueType>>, Vec<ValueType>) {
            let x = [
                [-0.6814062771144076, 0.7920382325181422],
                [0.5361153314511329, 0.9697943248269911],
                [1.7969730166996338, 0.18101334799756763],
                [1.7844215261283047, -0.23253955516959857],
                [0.7977678615291423, 0.5347154977148934],
                [-0.7603113448527232, 0.43677169250749975],
                [-0.14270683148005386, 0.8999561994393209],
                [0.954091874048302, 0.08069672417087292],
                [1.940708611980797, 0.03642978197664637],
                [-0.9183909848546767, 0.381274255878165],
                [1.9150198317884841, 0.16945752087762825],
                [0.10548119336716988, 0.2265370851974184],
                [0.845293585787585, 0.34701013253507856],
                [-0.9551801242355479, 0.15424191604004542],
                [1.0976133178272809, 0.13345367639031544],
                [0.7415888895278908, 0.7420602017459266],
                [-0.7566487926184923, 0.5504910924759813],
                [1.1041238101440682, 0.4670782617328841],
                [1.0794400649004279, -0.48992736015939736],
                [0.18988324590896655, -0.3545685595564724],
                [0.24039824582892969, -0.4334450953165363],
                [0.19383787460433205, -0.24034500895747657],
                [-0.8534321295436411, 0.0972996073691718],
                [0.43722386253485934, -0.2847284736544069],
                [-0.7917869704194583, 0.4583839852662698],
                [1.9924976080096917, 0.014750195009779019],
                [0.8397471927386795, 0.7340272807646157],
                [1.7519284767520815, -0.12956684460811385],
                [-0.2689285868898301, 0.7263489999036116],
                [-0.04439046523473711, 0.026555296553547596],
                [-0.33482756084020504, 0.7986341990291689],
                [1.3994516519084144, -0.5173702597264475],
                [0.1443660804553129, 0.286631484072166],
                [0.18509749091357336, 0.8212347915937532],
                [-0.6367679095446364, 0.77553324089765],
                [0.8003546570527463, -0.5266441029462832],
                [1.8000572635511773, -0.2569116836288986],
                [-0.08131285559427381, 1.0664385767643827],
                [0.562976093410885, 0.7913327159471186],
                [-0.9812362607554783, 0.033124401151959956],
                [1.376370418074238, -0.4121070549603794],
                [1.1177979497116053, -0.6954955540189208],
                [0.41806353437446947, -0.4063598001574253],
                [2.1389376742213084, 0.47164749479052254],
                [-0.5309588492530424, 0.6790113041211578],
                [0.9228944115200792, -0.30722633153100487],
                [-0.07542647508645352, 1.0399584182409658],
                [0.06005152707101502, 0.29677041525600656],
                [-0.9499208765070345, 0.19460057710350748],
                [-0.2611329158425482, 0.7815995473330891],
                [1.695793373453389, -0.1358569996980744],
                [0.9816538501432531, 0.342560284883342],
                [-0.6584466392947298, 0.3000335945275486],
                [0.00484613892559399, 1.0020811081983376],
                [0.8268982038733121, -0.47446298309190654],
                [0.5106896517749027, -0.25504892778826405],
                [0.8272880238928823, 0.3902941575649073],
                [1.0414689181653356, -0.511517226994467],
                [-0.9892947714595001, 0.517270065679524],
                [1.2689259292722141, -0.35764885821333475],
                [-0.6568173414254604, 0.75391435409367],
                [-0.4766436268260516, 0.7303679600370083],
                [-0.13495732688111892, 0.7192646721054956],
                [0.589106081264523, 0.741472545641276],
                [0.13260246984919888, 0.35084773303039596],
                [1.9077397999155106, 0.40084275714635037],
                [0.16549616838616402, 0.10848885364977198],
                [0.9105552668944693, 0.008959429820508624],
                [0.7126634642675578, -0.4168150417894914],
                [1.8108849036594317, -0.22699114062577386],
                [0.76793180777506, 0.7146412524937866],
                [0.08959686369249813, -0.142819139980701],
                [1.7586510616820326, -0.19010006143741065],
                [1.626683872231186, -0.4011387807054113],
                [0.8090253857963334, 0.6435500238997914],
                [1.0936945148582686, -0.38384842441226885],
                [0.1173293980345243, 1.1669942192580254],
                [0.1435383181362826, -0.30723841967680365],
                [1.9521185388333324, 0.3352644684564559],
                [1.8576332125120794, 0.012236124420530903],
                [0.04254489737992748, 0.5052967982395644],
                [0.9621741987093718, 0.28400512117326127],
                [-0.20215864355307372, 0.8227491257474264],
                [1.3146677027955012, -0.5098757599767545],
                [-0.9228340512591603, 0.3698989893238219],
                [-0.8025504643761677, 0.41905779946106575],
                [-1.0143106754588955, 0.27287107358424445],
                [0.28942939432424747, -0.28623333402354123],
                [0.19752714288589746, 0.9496772194678167],
                [0.08056891692964388, -0.2329779433414143],
                [-0.02972645378851694, 0.34104597549960614],
                [0.8494149483101731, -0.5661587360464364],
                [0.39199649793498637, 0.9595760249347214],
                [1.8787755979501033, 0.15305701227801785],
                [1.8415974928207062, 0.2397520050114053],
                [0.49563356738403136, 0.9697357619006834],
                [1.255684863736659, -0.32780716137869087],
                [1.0142902386599038, 0.24014844026646037],
                [0.26434632260488683, 0.8648866066413733],
                [-0.05644244984239859, 1.1828916987902407],
            ]
            .iter()
            .map(|&i| i.to_vec())
            .collect::<Vec<_>>();

            let y = [
                0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,
                0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1,
                0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1,
                0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0,
            ]
            .iter()
            .map(|&i| i as ValueType)
            .collect::<Vec<_>>();

            (x, y)
        }
    }
}
